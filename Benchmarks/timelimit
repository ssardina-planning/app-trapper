#!/usr/bin/perl
# Resource monitoring script for limiting black-boxed processes.
# It runs an arbitrary process and watches for memory and time consumption.
# The main feature is that it watches not only the process spawned, but also
# its children--as long as it doesn't emerge a new process group, which it
# should watch for on its own.

#   Copyright 2010 Institute for System Programming
#                  of Russian Academy of Sciences
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

sub usage{ print STDERR <<usage_ends;
Usage:
	timeout [-t timelimit] [-m memlimit] [-x herz] command [argumens ...]

usage_ends
	die;
}
# We use require_order because we don't want to process options of the command we run
use Getopt::Long qw(:config require_order);

my $timelimit = undef;
my $memlimit = undef;
# Requests per seccond
my $frequency = 10;

GetOptions(
	'timelimit|t=i'=>\$timelimit,
	'memlimit|m=i'=>\$memlimit,
	'frequency|x=i'=>\$frequency,
) or usage;

@ARGV or usage;

my $uwait = int (1_000_000 / $frequency);
print "@ARGV"; 
use strict;

# Fork process and set its process group
my $blackbox_pid = fork;
defined $blackbox_pid or die "Couldn't fork: $!";

unless ($blackbox_pid){
	# Set the process group of the blackbox process
	setpgrp 0,0;
	local $" = " ";
	exec @ARGV or die "Couldn't exec @ARGV: $!"; 
}
# Make sure we kill forked child on exit
sub when_die{
	kill_process_group_safely($blackbox_pid);
	exit -1;
};
$SIG{'INT'} = \&when_die;
$SIG{'TERM'} = \&when_die;
$SIG{'QUIT'} = \&when_die;

use Data::Dumper;

# Now we'll just keep polling status of the process until we notice that resources are exhausted or until the child finishes
use Time::HiRes qw( ualarm );

# see sub update_time for explanations of this structure
my $timeinfo = { total => 0, finished => 0, current => {} };
# For this -- update_memory
my $meminfo = 0;

my $status = 'wait';
my $box_status = 0;
while ($status eq 'wait'){
	# Usually we would just do alarm-waitpid, but in Perl we should do weird evals.
	# Refer to `perldoc alarm` if surprised.
	eval {
		local $SIG{'ALRM'} = sub {
			# Note that this signal can only interrupt "wait" function (unless we're currently in some internals of Perl implementation of waitpid wrapper, but must of the time we spend inside the wait() call).
			# According to signal(7), wait is a safe function, so we can call anything we want here.
			$timeinfo = update_time($blackbox_pid,$timeinfo);
			$meminfo = update_memory($blackbox_pid,$meminfo);
			die "Assume waitpid return 0\n";
		};
		ualarm $uwait;
		my $arrived = waitpid $blackbox_pid,0;
		ualarm 0;
		die "Assume waitpid return $arrived\n";
	};
	my $arrived = -1;
	if ($@ =~ /Assume waitpid return (.*)/){
		$arrived = $1;
	}else{
		die "Fail: $@";
	}
	if ($arrived == $blackbox_pid){
		# Child process terminated.
		$box_status = $?>>8;
		$status = 'exit'
	}elsif ($arrived == -1){
		# Something happened!
		die "wait($blackbox_pid) failed: $!";
	}else{
		# Check if limits are exhausted (they should be updated by signal handler).
		if (defined $timelimit && $timeinfo->{total} > $timelimit){
			print STDERR "$ENV{'TIMEOUT_IDSTR'}TIMEOUT $timeinfo->{total} CPU\n";
			kill_process_group_safely($blackbox_pid);
			exit 0;
		}
		if (defined $memlimit && $meminfo > $memlimit){
			print STDERR "$ENV{'TIMEOUT_IDSTR'}MEM $timeinfo->{total}\n";
			kill_process_group_safely($blackbox_pid);
			exit 0;
		}
	}
}

exit $box_status;

#-----------------------------------------------
use POSIX;
my $ticksize;
BEGIN { $ticksize = POSIX::sysconf(&POSIX::_SC_CLK_TCK) or die "Couldn't get ticksize";}
sub hires_proc_runtime
{
	my ($pid) = @_;
	my $stat = `cat /proc/$pid/stat 2>/dev/null`;
	# Since we invoke this function quite often, process may decease betweem ps invocation and attempt to access its /proc entry.  So, we return undef and handle it in the caller.
	return undef unless $stat;
	# Parse proc stats--14th is utime, and it's expressed in ticks.
	my (undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,$utime_ticks,$stime_ticks) = split /\s+/,$stat;
	return ($utime_ticks + $stime_ticks)/$ticksize;
}
sub update_time
{
	# Calculate the CPU+SYS time consumed by processes in the process group.  Updates special timeinfo structure fur future calculations
	my ($pgrp, $timeinfo) = @_;
	my %terminated = (%{$timeinfo->{current}});
	my $result = {total => $timeinfo->{total}, finished => $timeinfo->{finished}, current => {} };
	# Read ps output to get all processes within a group. Time output is not necessary, since we calculate it directly via /proc
	my $PS_FH; open $PS_FH, "-|", qw(ps -A -o pgrp= -o pid=) or die "Bad open ps: $!";
	while (<$PS_FH>){
		/^\s*([0-9]+)\s*([0-9]+)/ or next;
		my ($grp,$pid) = ($1,$2);
		$grp == $pgrp or next;

		# If hires_proc_runtime doesn't return a value (the $pid died before it tried), we keep the old value of time.  The error is not greater than ualarm interval.
		$result->{current}->{$pid} = hires_proc_runtime($pid) || $timeinfo->{current}->{$pid};
		# Show that this process is still running by removind it from set of processes that were running in this group, but have been terminated.
		delete $terminated{$pid} if $terminated{$pid};
	}
	close $PS_FH or die "Bad close ps: $!";

	local $_;
	# Add the total time of terminated processes to finished time.
	$result->{finished}+=$_ for values %terminated;

	# Recalculate total time
	$result->{total}=$result->{finished};
	$result->{total}+=$_ for values %{$result->{current}};

	return $result;
}

sub update_memory
{
	# Calculate the amount of memory consumed by the process group given 
	my ($pgrp) = @_;
	my $result = 0;
	# Read ps output to get all processes within a group.
	my $PS_FH; open $PS_FH, "-|", qw(ps -A -o pgrp= -o pid= -o vsz=) or die "Bad open ps: $!";
	while (<$PS_FH>){
		/^\s*([0-9]+)\s*([0-9]+)\s*([0-9]+)/ or next;
		my ($grp,$pid,$mem) = ($1,$2,$3);
		$grp == $pgrp or next;
		$result += $mem;
	}
	close $PS_FH or die "Bad close ps: $!";

	return $result;
}

sub kill_process_group_safely
{
	my ($pgrp) = @_;
	# it's still unclear to me if there won't be a delay between catching signals in different processes when a signal is sent to a whole group.
	kill SIGSTOP, -$pgrp or die;
	kill SIGTERM, -$pgrp or die;
	kill SIGCONT, -$pgrp or die;

	kill SIGKILL, -$pgrp or die;
}


 
