Checking plan: emptyplan.tmp
Plan executed successfully - checking goal
Plan valid
Final value: 0

Successful plans:
Value: 0
 emptyplan.tmp 

Trying empty plan..


PP:RESTART 0

******* STEP: 0 Processing from node 0 and state 0*******



Planning for edge <0,1> with goal G0
Checking plan: emptyplan.tmp
Plan executed successfully - checking goal
Goal not satisfied
Plan invalid


Failed plans:
 emptyplan.tmp 


NUMERIC_THREATS_MODE: 0

; Command line: /home/ssardina/git/soft/planning/app/app-trapper.git/tools/lpg -f pfile.pddl -o domain.pddl -out soln.tmp -n 1 -seed 125 -cputime 60 -nobestfirst -inst_with_contraddicting_objects   


Parsing domain file:  domain 'AIRPORT_FIXED_STRUCTURE' defined ... done.
Parsing problem file:  problem 'PROBLEM_X' defined ... done.



Modality: Incremental Planner

Number of actions             :       1
Number of conditional actions :       0
Number of facts               :       2


Analyzing Planning Problem:
	Temporal Planning Problem: NO
	Numeric Planning Problem: YES
	Problem with Timed Initial Literals: NO
	Problem with Derived Predicates: NO

Evaluation function weights:
     Action duration 0.00; Action cost 1.00


Computing mutex... done

Preprocessing total time: 0.02 seconds

Searching ('.' = every 50 search steps):
 solution found: 
 first_solution_cpu_time: 0.02 

Plan computed:
   Time: (ACTION) [action Duration; action Cost]
 0.0000: (PREF-OP0) [D:1.00; C:0.10]



METRIC_VALUE = 0.00
Solution number: 1
Total time:      0.02
Search time:     0.00
Actions:         1
Duration:        1.000
Plan quality:    -0.000 
Total Num Flips: 1
     Plan file:       soln.tmp_1_1.SOL

Trying empty plan..
Adding state 0 to node 1

Insert Flaw: State 0 of Node 1

####### CURRENT GRAPH #######
## NODE: 0 
# List of States:
  State 0, N0S0 [derived from node -1 and state -1]
# List of Plans:
  Plan N0N1S0.soln for state 0
## NODE: 1 
# List of States:
  State 0, N1S0 [derived from node 0 and state 0]
# List of Plans:
## NODE: 2 
# List of States:
# List of Plans:



List of flaw:
NODE: 1 STATE 0


******* STEP: 1 Processing from node 1 and state 0*******



Planning for edge <1,2> with goal G1
Checking plan: emptyplan.tmp
Plan executed successfully - checking goal
Goal not satisfied
Plan invalid


Failed plans:
 emptyplan.tmp 


NUMERIC_THREATS_MODE: 0

; Command line: /home/ssardina/git/soft/planning/app/app-trapper.git/tools/lpg -f pfile.pddl -o domain.pddl -out soln.tmp -n 1 -seed 126 -cputime 60 -nobestfirst -inst_with_contraddicting_objects   


Parsing domain file:  domain 'AIRPORT_FIXED_STRUCTURE' defined ... done.
Parsing problem file:  problem 'PROBLEM_X' defined ... done.



Modality: Incremental Planner

Number of actions             :       1
Number of conditional actions :       0
Number of facts               :       2


Analyzing Planning Problem:
	Temporal Planning Problem: NO
	Numeric Planning Problem: YES
	Problem with Timed Initial Literals: NO
	Problem with Derived Predicates: NO

Evaluation function weights:
     Action duration 0.00; Action cost 1.00


Computing mutex... done

Preprocessing total time: 0.00 seconds

Searching ('.' = every 50 search steps):
 solution found: 
 first_solution_cpu_time: 0.01 

Plan computed:
   Time: (ACTION) [action Duration; action Cost]
 0.0000: (PREF-OP0) [D:1.00; C:0.10]



METRIC_VALUE = 0.00
Solution number: 1
Total time:      0.01
Search time:     0.01
Actions:         1
Duration:        1.000
Plan quality:    -0.000 
Total Num Flips: 1
     Plan file:       soln.tmp_1_1.SOL

Trying empty plan..
Adding state 0 to node 2

Insert Flaw: State 0 of Node 2

####### CURRENT GRAPH #######
## NODE: 0 
# List of States:
  State 0, N0S0 [derived from node -1 and state -1]
# List of Plans:
  Plan N0N1S0.soln for state 0
## NODE: 1 
# List of States:
  State 0, N1S0 [derived from node 0 and state 0]
# List of Plans:
  Plan N1N2S0.soln for state 0
## NODE: 2 
# List of States:
  State 0, N2S0 [derived from node 1 and state 0]
# List of Plans:



List of flaw:
NODE: 2 STATE 0


******* STEP: 2 Processing from node 2 and state 0*******



####### CURRENT GRAPH #######
## NODE: 0 
# List of States:
  State 0, N0S0 [derived from node -1 and state -1]
# List of Plans:
  Plan N0N1S0.soln for state 0
## NODE: 1 
# List of States:
  State 0, N1S0 [derived from node 0 and state 0]
# List of Plans:
  Plan N1N2S0.soln for state 0
## NODE: 2 
# List of States:
  State 0, N2S0 [derived from node 1 and state 0]
# List of Plans:



List of flaw:
SUCCESS

